#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf




#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\common.h
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\common.h



#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\OOP_Light.h
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\OOP_Light.h
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\config\global_config.hpp
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\config\global_config.hpp
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\config\user_local_config.hpp
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\config\user_local_config.hpp






































































































#line 1 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\config\global_config.hpp

#line 1 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\OOP_Light.h

#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\Common.h
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\Common.h









































































#line 3 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\OOP_Light.h






















































#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\Platform.h
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\Platform.h























































































































#line 58 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\OOP_Light.h



























	












	






































































































	
	
	
	








	
	
	
	
	
	
	
	






















































































































































	



















	
	
	
	
	
	















































	

	

	

	

	

































































































































































































	
	
	
	
	



























#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\OOP_Log.h
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\OOP_Log.h








































































































































































#line 955 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\OOP_Light\OOP_Light.h























#line 4 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\common.h








































































#line 5 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\Message\Message.hpp
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\Message\Message.hpp


























































#line 6 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\MessageTypes.hpp
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\MessageTypes.hpp















































#line 7 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\AI\Stimulus\Stimulus.hpp
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\AI\Stimulus\Stimulus.hpp





































































#line 8 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\AI\stimulusTypes.hpp
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\AI\stimulusTypes.hpp






































#line 9 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\CriticalSection\CriticalSection.hpp
#line 0 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\CriticalSection\CriticalSection.hpp






























#line 10 c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf




















	if ("SoundMonitor" == "UnknownClassName") then { diag_log format ["[OOP] Error: class %1 has no macro OOP_CLASS_NAME defined!", "SoundMonitor"]; }; 	; 	call { 		private _oop_classNameStr = "SoundMonitor"; 				missionNameSpace setVariable [("o_" + (_oop_classNameStr) + "_spm_" + (  "nextID")),  [0]]; 		private _oop_memList = []; 		private _oop_staticMemList = []; 		private _oop_parents = []; 		private _oop_methodList = []; 		private _oop_newMethodList = []; 		private _parentClassNames = if( "MessageReceiverEx" isEqualType "") then {[ "MessageReceiverEx"]} else { "MessageReceiverEx"}; 		if (count _parentClassNames > 0) then { 			{ 				private _baseClassNameStr = _x; 				if (_baseClassNameStr != "") then { 					if (!([_baseClassNameStr, "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 31] call OOP_assert_class)) then { 						private _msg = format ["Invalid base class for %1: %2", "SoundMonitor", baseClassNameStr]; 								private _o_str = format ["[%1.%2] ERROR: %3", if((isNil "_thisObject")) then { if(!(isNil "_thisClass")) then {_thisClass} else { if(!(isNil "_oop_logScope")) then { _oop_logScope } else { "NoClass" }} } else { _thisObject }, if (isNil "_methodNameStr") then {"fnc"} else {_methodNameStr}, format ["Failure: %1",  _msg]]; diag_log  _o_str; diag_log _o_str; ; diag_log "halt"; 		diag_log "callstack"; 		throw ["c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 31, _msg]; 					}; 					{_oop_parents pushBackUnique _x; } forEach 				( missionNameSpace getVariable ("o_" + (_baseClassNameStr) + "_spm_" + (  "parents")) ); 					_oop_parents pushBackUnique _baseClassNameStr; 					{ _oop_memList pushBackUnique _x; } forEach 				( missionNameSpace getVariable ("o_" + (_baseClassNameStr) + "_spm_" + (  "memList")) ); 					{ _oop_staticMemList pushBackUnique _x; } forEach 				( missionNameSpace getVariable ("o_" + (_baseClassNameStr) + "_spm_" + (  "staticMemList")) ); 					private _oop_addedMethodList = []; 					{ _oop_methodList pushBackUnique _x; _oop_addedMethodList pushBackUnique _x; } forEach 				( missionNameSpace getVariable ("o_" + (_baseClassNameStr) + "_spm_" + (  "methodList")) ); 					private _oop_topParent = _oop_parents select ((count _oop_parents) - 1); 					{ private _oop_methodCode = 				( missionNameSpace getVariable ((_oop_topParent) + "_fnc_" + (  _x)) ); 									missionNameSpace setVariable [(("SoundMonitor") + "_fnc_" + (  _x)),  _oop_methodCode]; 						_oop_methodCode = 				( missionNameSpace getVariable ((_oop_topParent) + "_fnc_" + (  ("inner_" + _x))) ); 						if (!isNil "_oop_methodCode") then { 			missionNameSpace setVariable [(("SoundMonitor") + "_fnc_" + (  ("inner_" + _x))),  _oop_methodCode]; }; 					} forEach (_oop_addedMethodList - ["new", "delete", "copy"]); 				}; 			} forEach _parentClassNames; 		}; 				missionNameSpace setVariable [("o_" + (_oop_classNameStr) + "_spm_" + (  "parents")),  _oop_parents]; 				missionNameSpace setVariable [("o_" + (_oop_classNameStr) + "_spm_" + (  "memList")),  _oop_memList]; 				missionNameSpace setVariable [("o_" + (_oop_classNameStr) + "_spm_" + (  "staticMemList")),  _oop_staticMemList]; 				missionNameSpace setVariable [("o_" + (_oop_classNameStr) + "_spm_" + (  "methodList")),  _oop_methodList]; 				missionNameSpace setVariable [("o_" + (_oop_classNameStr) + "_spm_" + (  "namespace")),  missionNameSpace]; 		; 				+[] call { missionNamespace setVariable [((_oop_classNameStr) + "_fncattr_" + ( "new")), _this]; }; 		; 		_oop_methodList pushBackUnique "new";  		_oop_newMethodList pushBackUnique "new"; 		missionNamespace setVariable [((_oop_classNameStr) + "_fnc_" + ( "new")), { 			private _thisClass = nil; 			private _thisObject = _this select 0; 			private _methodNameStr = "new"; 			private _objOrClass = _this select 0; 			; 			; 			private _result = ([0] apply { _this call { 			}}) select 0;			; 			; 			if !(isNil "_result") then { _result } else { nil } 		} ]; 				+[] call { missionNamespace setVariable [((_oop_classNameStr) + "_fncattr_" + ( "delete")), _this]; }; 		; 		_oop_methodList pushBackUnique "delete";  		_oop_newMethodList pushBackUnique "delete"; 		missionNamespace setVariable [((_oop_classNameStr) + "_fnc_" + ( "delete")), { 			private _thisClass = nil; 			private _thisObject = _this select 0; 			private _methodNameStr = "delete"; 			private _objOrClass = _this select 0; 			; 			; 			private _result = ([0] apply { _this call { 			}}) select 0;			; 			; 			if !(isNil "_result") then { _result } else { nil } 		} ]; 				+[] call { missionNamespace setVariable [((_oop_classNameStr) + "_fncattr_" + ( "copy")), _this]; }; 		; 		_oop_methodList pushBackUnique "copy";  		_oop_newMethodList pushBackUnique "copy"; 		missionNamespace setVariable [((_oop_classNameStr) + "_fnc_" + ( "copy")), { 			private _thisClass = nil; 			private _thisObject = _this select 0; 			private _methodNameStr = "copy"; 			private _objOrClass = _this select 0; 			; 			; 			private _result = ([0] apply { _this call { 			 _this call OOP_clone_default }}) select 0;			; 			; 			if !(isNil "_result") then { _result } else { nil } 		} ]; 				+[] call { missionNamespace setVariable [((_oop_classNameStr) + "_fncattr_" + ( "assign")), _this]; }; 		; 		_oop_methodList pushBackUnique "assign";  		_oop_newMethodList pushBackUnique "assign"; 		missionNamespace setVariable [((_oop_classNameStr) + "_fnc_" + ( "assign")), { 			private _thisClass = nil; 			private _thisObject = _this select 0; 			private _methodNameStr = "assign"; 			private _objOrClass = _this select 0; 			; 			; 			private _result = ([0] apply { _this call { 			 _this call OOP_assign_default }}) select 0;			; 			; 			if !(isNil "_result") then { _result } else { nil } 		} ]; 			if(!(("oop_parent") in ["oop_parent", "oop_public"]) && (_oop_memList findIf { (_x select 0) isEqualTo ("oop_parent") } != -1)) then { 		private _o_str = format ["[%1.%2] ERROR: %3", if((isNil "_thisObject")) then { if(!(isNil "_thisClass")) then {_thisClass} else { if(!(isNil "_oop_logScope")) then { _oop_logScope } else { "NoClass" }} } else { _thisObject }, if (isNil "_methodNameStr") then {"fnc"} else {_methodNameStr}, format ["Class %1 is hiding variable '%2' in parent",  _oop_classNameStr,  "oop_parent"]]; diag_log  _o_str; diag_log _o_str; ; diag_log "halt"; 	}; 	_oop_memList pushBackUnique ["oop_parent",  []]; 			if(!(("oop_public") in ["oop_parent", "oop_public"]) && (_oop_memList findIf { (_x select 0) isEqualTo ("oop_public") } != -1)) then { 		private _o_str = format ["[%1.%2] ERROR: %3", if((isNil "_thisObject")) then { if(!(isNil "_thisClass")) then {_thisClass} else { if(!(isNil "_oop_logScope")) then { _oop_logScope } else { "NoClass" }} } else { _thisObject }, if (isNil "_methodNameStr") then {"fnc"} else {_methodNameStr}, format ["Class %1 is hiding variable '%2' in parent",  _oop_classNameStr,  "oop_public"]]; diag_log  _o_str; diag_log _o_str; ; diag_log "halt"; 	}; 	_oop_memList pushBackUnique ["oop_public",  []];

		if(!(("timer") in ["oop_parent", "oop_public"]) && (_oop_memList findIf { (_x select 0) isEqualTo ("timer") } != -1)) then { 		private _o_str = format ["[%1.%2] ERROR: %3", if((isNil "_thisObject")) then { if(!(isNil "_thisClass")) then {_thisClass} else { if(!(isNil "_oop_logScope")) then { _oop_logScope } else { "NoClass" }} } else { _thisObject }, if (isNil "_methodNameStr") then {"fnc"} else {_methodNameStr}, format ["Class %1 is hiding variable '%2' in parent",  _oop_classNameStr,  "timer"]]; diag_log  _o_str; diag_log _o_str; ; diag_log "halt"; 	}; 	_oop_memList pushBackUnique ["timer",  []];			

		if(!(("unit") in ["oop_parent", "oop_public"]) && (_oop_memList findIf { (_x select 0) isEqualTo ("unit") } != -1)) then { 		private _o_str = format ["[%1.%2] ERROR: %3", if((isNil "_thisObject")) then { if(!(isNil "_thisClass")) then {_thisClass} else { if(!(isNil "_oop_logScope")) then { _oop_logScope } else { "NoClass" }} } else { _thisObject }, if (isNil "_methodNameStr") then {"fnc"} else {_methodNameStr}, format ["Class %1 is hiding variable '%2' in parent",  _oop_classNameStr,  "unit"]]; diag_log  _o_str; diag_log _o_str; ; diag_log "halt"; 	}; 	_oop_memList pushBackUnique ["unit",  []];			

		if(!(("silenced") in ["oop_parent", "oop_public"]) && (_oop_memList findIf { (_x select 0) isEqualTo ("silenced") } != -1)) then { 		private _o_str = format ["[%1.%2] ERROR: %3", if((isNil "_thisObject")) then { if(!(isNil "_thisClass")) then {_thisClass} else { if(!(isNil "_oop_logScope")) then { _oop_logScope } else { "NoClass" }} } else { _thisObject }, if (isNil "_methodNameStr") then {"fnc"} else {_methodNameStr}, format ["Class %1 is hiding variable '%2' in parent",  _oop_classNameStr,  "silenced"]]; diag_log  _o_str; diag_log _o_str; ; diag_log "halt"; 	}; 	_oop_memList pushBackUnique ["silenced",  []];		

		if(!(("eventHandlers") in ["oop_parent", "oop_public"]) && (_oop_memList findIf { (_x select 0) isEqualTo ("eventHandlers") } != -1)) then { 		private _o_str = format ["[%1.%2] ERROR: %3", if((isNil "_thisObject")) then { if(!(isNil "_thisClass")) then {_thisClass} else { if(!(isNil "_oop_logScope")) then { _oop_logScope } else { "NoClass" }} } else { _thisObject }, if (isNil "_methodNameStr") then {"fnc"} else {_methodNameStr}, format ["Class %1 is hiding variable '%2' in parent",  _oop_classNameStr,  "eventHandlers"]]; diag_log  _o_str; diag_log _o_str; ; diag_log "halt"; 	}; 	_oop_memList pushBackUnique ["eventHandlers",  []];

			+[] call { missionNamespace setVariable [((_oop_classNameStr) + "_fncattr_" + ( "new")), _this]; }; 		; 		_oop_methodList pushBackUnique "new";  		_oop_newMethodList pushBackUnique "new"; 		missionNamespace setVariable [((_oop_classNameStr) + "_fnc_" + ( "new")), { 			private _thisClass = nil; 			private _thisObject = _this select 0; 			private _methodNameStr = "new"; 			private _objOrClass = _this select 0; 			; 			; 			private _result = ([0] apply { _this call { 			
		params [["_thisObject", ""], ["_unit", objNull, [objNull]]];

				if([_thisObject,  "unit", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 44] call OOP_assert_member_is_not_ref) then { 						[_thisObject,   "unit", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 44] call OOP_assert_set_member_access; 			setVariable(_thisObject,  "unit",   _unit) 		};
				if([_thisObject,  "silenced", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 45] call OOP_assert_member_is_not_ref) then { 						[_thisObject,   "silenced", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 45] call OOP_assert_set_member_access; 			setVariable(_thisObject,  "silenced",   true) 		};
				if([_thisObject,  "eventHandlers", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 46] call OOP_assert_member_is_not_ref) then { 						[_thisObject,   "eventHandlers", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 46] call OOP_assert_set_member_access; 			setVariable(_thisObject,  "eventHandlers",   []) 		};

		
		private _msg = ["", "", 0, -666, 0, 0];
		_msg set [0,  _thisObject];
		_msg set [4,  "process"];
		_msg set [	5,  []];
		private _updateInterval = 16;
		private _args = [_thisObject, _updateInterval, _msg, gTimerServiceMain];
		private _timer = (["Timer",  _args] call OOP_new);
				if([_thisObject,  "timer", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 56] call OOP_assert_member_is_not_ref) then { 						[_thisObject,   "timer", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 56] call OOP_assert_set_member_access; 			setVariable(_thisObject,  "timer",   _timer) 		};

		
		
		
		_unit setVariable ["__hitAccumulator", 0];
		_unit setVariable ["__hitMax", 0];

		
		private _ehid = _unit addEventHandler ["FiredMan", 		( if(["SoundMonitor",  "EHFiredMan", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 65] call OOP_assert_method) then { 							( missionNameSpace getVariable (("SoundMonitor") + "_fnc_" + (   "EHFiredMan")) ) 		}else{nil} )];
				( if([_thisObject,  "eventHandlers", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 66] call OOP_assert_member) then { 						[_thisObject,   "eventHandlers", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 66] call OOP_assert_get_member_access; 			getVariable(_thisObject,  "eventHandlers") 		}else{nil} ) pushBack ["FiredMan", _ehid];
	}}) select 0;			; 			; 			if !(isNil "_result") then { _result } else { nil } 		} ];

			+[] call { missionNamespace setVariable [((_oop_classNameStr) + "_fncattr_" + ( "delete")), _this]; }; 		; 		_oop_methodList pushBackUnique "delete";  		_oop_newMethodList pushBackUnique "delete"; 		missionNamespace setVariable [((_oop_classNameStr) + "_fnc_" + ( "delete")), { 			private _thisClass = nil; 			private _thisObject = _this select 0; 			private _methodNameStr = "delete"; 			private _objOrClass = _this select 0; 			; 			; 			private _result = ([0] apply { _this call { 			
		params [["_thisObject", ""]];

		
		private _timer = 		( if([_thisObject,  "timer", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 73] call OOP_assert_member) then { 						[_thisObject,   "timer", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 73] call OOP_assert_get_member_access; 			getVariable(_thisObject,  "timer") 		}else{nil} );
		([_timer] call OOP_delete);

		
		private _unit = 		( if([_thisObject,  "unit", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 77] call OOP_assert_member) then { 						[_thisObject,   "unit", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 77] call OOP_assert_get_member_access; 			getVariable(_thisObject,  "unit") 		}else{nil} );
		{
			_x params ["_type", "_id"];
			_unit removeEventHandler [_type, _id];
		} forEach 		( if([_thisObject,  "eventHandlers", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 81] call OOP_assert_member) then { 						[_thisObject,   "eventHandlers", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 81] call OOP_assert_get_member_access; 			getVariable(_thisObject,  "eventHandlers") 		}else{nil} );

	}}) select 0;			; 			; 			if !(isNil "_result") then { _result } else { nil } 		} ];

			+[] call { missionNamespace setVariable [((_oop_classNameStr) + "_fncattr_" + ( "getMessageLoop")), _this]; }; 		; 		_oop_methodList pushBackUnique "getMessageLoop";  		_oop_newMethodList pushBackUnique "getMessageLoop"; 		missionNamespace setVariable [((_oop_classNameStr) + "_fnc_" + ( "getMessageLoop")), { 			private _thisClass = nil; 			private _thisObject = _this select 0; 			private _methodNameStr = "getMessageLoop"; 			private _objOrClass = _this select 0; 			; 			; 			private _result = ([0] apply { _this call { 			
		gMsgLoopPlayerChecks
	}}) select 0;			; 			; 			if !(isNil "_result") then { _result } else { nil } 		} ];

			+[] call { missionNamespace setVariable [((_oop_classNameStr) + "_fncattr_" + ( "process")), _this]; }; 		; 		_oop_methodList pushBackUnique "process";  		_oop_newMethodList pushBackUnique "process"; 		missionNamespace setVariable [((_oop_classNameStr) + "_fnc_" + ( "process")), { 			private _thisClass = nil; 			private _thisObject = _this select 0; 			private _methodNameStr = "process"; 			private _objOrClass = _this select 0; 			; 			; 			private _result = ([0] apply { _this call { 			
		params [["_thisObject", ""]];

		;

		private _unit = 		( if([_thisObject,  "unit", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 94] call OOP_assert_member) then { 						[_thisObject,   "unit", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 94] call OOP_assert_get_member_access; 			getVariable(_thisObject,  "unit") 		}else{nil} );

		
		if (!alive _unit) exitWith {
			([_thisObject] call OOP_delete);
			0
		};

		
		private _silenced = [_unit] call misc_fnc_currentWeaponSilenced;
				if([_thisObject,  "silenced", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 104] call OOP_assert_member_is_not_ref) then { 						[_thisObject,   "silenced", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 104] call OOP_assert_set_member_access; 			setVariable(_thisObject,  "silenced",   _silenced) 		};

		
		private _null = isNil {
			private _hitAcc = _unit getVariable "__hitAccumulator";
			if (!_silenced) then {
				if (_hitAcc > 0) then {

					private _hitMax = _unit getVariable "__hitMax";

					;

					
					
					private _range = 1000*log(_hitMax/8+1)+1100;
					private _value = _hitAcc / 16; 

					
					private _stim = [0, 0, [0, 0, 0], 666666, 0, 0, []];
					_stim set [			0,  1];
					_stim set [			1,  _unit];
					_stim set [				2,  getPos _unit];
					_stim set [			3,  _range];
					_stim set [			4,  _value];
					_stim set [	6,  [EAST , WEST , INDEPENDENT] - [side group _unit]];
					(([gStimulusManagerGarrison,   "handleStimulus",   [_stim]]) call 		( if([(getVariable(gStimulusManagerGarrison, "oop_parent")),    "postMethodAsync", "c:\Users\billw\Documents\Arma 3\mpmissions\Vindicta\Vindicta.Altis\ClientSideChecks\SoundMonitor.sqf", 129] call OOP_assert_method) then { 							( missionNameSpace getVariable (((getVariable(gStimulusManagerGarrison, "oop_parent"))) + "_fnc_" + (     "postMethodAsync")) ) 		}else{nil} ));

					
					_unit setVariable ["__hitMax", 0];
					_unit setVariable ["__hitAccumulator", 0];
				};
			} else {
				
				_unit setVariable ["__hitMax", 0];
				_unit setVariable ["__hitAccumulator", 0];
			};
		};

		0
	}}) select 0;			; 			; 			if !(isNil "_result") then { _result } else { nil } 		} ];

			+[] call { missionNamespace setVariable [((_oop_classNameStr) + "_fncattr_" + ( "EHFiredMan")), _this]; }; 		; 		_oop_methodList pushBackUnique "EHFiredMan"; 		_oop_newMethodList pushBackUnique "EHFiredMan"; 		missionNamespace setVariable [((_oop_classNameStr) + "_fnc_" + ( "EHFiredMan")), { 			private _thisObject = nil; 			private _thisClass = _this select 0; 			private _methodNameStr = "EHFiredMan"; 			private _objOrClass = _this select 0; 			; 			; 			private _result = ([0] apply { _this call {
		
		params ["_unit", "_weapon", "_muzzle", "_mode", "_ammo", "_magazine", "_projectile", "_vehicle"];
		
		private _hit = getNumber (configFile >> "cfgAmmo" >> _ammo >> "hit");
		
		







		
		
		
		if(_hit > 0 && _weapon != "Put") then
		{
			private _hitMax = _unit getVariable "__hitMax";
			private _hitAcc = _unit getVariable "__hitAccumulator";

			
			_unit setVariable ["__hitAccumulator", _hitAcc + _hit];
			

			
			if (_hit > _hitMax) then {
				_unit setVariable ["__hitMax", _hit];
			};
		};
	}}) select 0;			; 			; 			if !(isNil "_result") then { _result } else { nil } 		} ];

 ; private _serialVariables = 				( missionNameSpace getVariable ("o_" + (_oop_classNameStr) + "_spm_" + (  "memList")) ); _serialVariables = _serialVariables select { 	_x params ["_varName", "_attributes"]; 		2 in _attributes }; 		missionNameSpace setVariable [("o_" + (_oop_classNameStr) + "_spm_" + (  "serialMemList")),  _serialVariables]; };[WORK]	<EMPTY>	

